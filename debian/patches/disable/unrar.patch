description: disable support for safe browsing inspection of rar files
author: Michael Gilbert <mgilbert@debian.org>
bug: http://bugs.debian.org/914487

--- a/chrome/common/safe_browsing/BUILD.gn
+++ b/chrome/common/safe_browsing/BUILD.gn
@@ -143,8 +143,6 @@ source_set("safe_browsing") {
       "protobuf_message_log_macros.h",
       "protobuf_message_read_macros.h",
       "protobuf_message_write_macros.h",
-      "rar_analyzer.cc",
-      "rar_analyzer.h",
       "seven_zip_analyzer.cc",
       "seven_zip_analyzer.h",
       "zip_analyzer.cc",
@@ -160,7 +158,6 @@ source_set("safe_browsing") {
       "//components/safe_browsing/content/common:file_type_policies",
       "//components/safe_browsing/core/common",
       "//third_party/lzma_sdk/google:seven_zip_reader",
-      "//third_party/unrar:unrar",
     ]
 
     if (is_linux) {
--- a/chrome/browser/safe_browsing/download_protection/file_analyzer.cc
+++ b/chrome/browser/safe_browsing/download_protection/file_analyzer.cc
@@ -78,7 +78,7 @@ void FileAnalyzer::Start(const base::Fil
   if (inspection_type == DownloadFileType::ZIP) {
     StartExtractZipFeatures();
   } else if (inspection_type == DownloadFileType::RAR) {
-    StartExtractRarFeatures();
+    LOG(WARNING) << "Safebrowser inspection of rar files is disabled in this build";
 #if BUILDFLAG(IS_MAC)
   } else if (inspection_type == DownloadFileType::DMG) {
     StartExtractDmgFeatures();
--- a/chrome/services/file_util/safe_archive_analyzer.cc
+++ b/chrome/services/file_util/safe_archive_analyzer.cc
@@ -67,15 +67,12 @@ void SafeArchiveAnalyzer::AnalyzeRarFile
   AnalysisFinishedCallback analysis_finished_callback =
       base::BindOnce(&SafeArchiveAnalyzer::AnalysisFinished,
                      weak_factory_.GetWeakPtr(), base::FilePath());
-  base::RepeatingCallback<void(GetTempFileCallback callback)>
-      temp_file_getter_callback =
-          base::BindRepeating(&SafeArchiveAnalyzer::RequestTemporaryFile,
-                              weak_factory_.GetWeakPtr());
-  timeout_timer_.Start(FROM_HERE, kArchiveAnalysisTimeout, this,
-                       &SafeArchiveAnalyzer::Timeout);
-  rar_analyzer_.Init(std::move(rar_file), base::FilePath(),
-                     std::move(analysis_finished_callback),
-                     std::move(temp_file_getter_callback), &results_);
+
+  LOG(FATAL) << "AnalyzeRarFile is disabled in this build";
+  //SetResultsForTesting(ArchiveAnalyzerResults* results);
+  //results_->success = false;
+  //results_->analysis_result = ArchiveAnalysisResult::kUnknown;
+  std::move(analysis_finished_callback).Run();
 }
 
 void SafeArchiveAnalyzer::AnalyzeSevenZipFile(
--- a/chrome/services/file_util/safe_archive_analyzer.h
+++ b/chrome/services/file_util/safe_archive_analyzer.h
@@ -6,7 +6,6 @@
 #define CHROME_SERVICES_FILE_UTIL_SAFE_ARCHIVE_ANALYZER_H_
 
 #include "chrome/common/safe_browsing/archive_analyzer_results.h"
-#include "chrome/common/safe_browsing/rar_analyzer.h"
 #include "chrome/services/file_util/public/mojom/safe_archive_analyzer.mojom.h"
 #include "mojo/public/cpp/bindings/remote.h"
 
@@ -59,7 +58,6 @@ class SafeArchiveAnalyzer : public chrom
   void Timeout();
 
   safe_browsing::ZipAnalyzer zip_analyzer_;
-  safe_browsing::RarAnalyzer rar_analyzer_;
 
   // A timer to ensure no archive takes too long to unpack.
   base::OneShotTimer timeout_timer_;
--- a/chrome/common/safe_browsing/zip_analyzer.cc
+++ b/chrome/common/safe_browsing/zip_analyzer.cc
@@ -18,7 +18,6 @@
 #include "base/time/time.h"
 #include "build/build_config.h"
 #include "chrome/common/safe_browsing/archive_analyzer_results.h"
-#include "chrome/common/safe_browsing/rar_analyzer.h"
 #include "components/safe_browsing/content/common/file_type_policies.h"
 #include "components/safe_browsing/core/common/features.h"
 #include "components/safe_browsing/core/common/proto/csd.pb.h"
@@ -133,12 +132,8 @@ bool ZipAnalyzer::AnalyzeNestedArchive(
                                get_temp_file_callback_, results_);
     return true;
   } else if (file_type == DownloadFileType::RAR) {
-    nested_rar_analyzer_ = std::make_unique<safe_browsing::RarAnalyzer>();
-    nested_rar_analyzer_->Init(temp_file_.Duplicate(),
-                               root_zip_path_.Append(path),
-                               std::move(nested_analysis_finished_callback),
-                               get_temp_file_callback_, results_);
-    return true;
+    LOG(FATAL) << "AnalyzeRarFile is disabled in this build";
+    return false;
   }
   return false;
 }
--- a/chrome/common/safe_browsing/zip_analyzer.h
+++ b/chrome/common/safe_browsing/zip_analyzer.h
@@ -14,7 +14,6 @@
 #include "third_party/zlib/google/zip_reader.h"
 
 namespace safe_browsing {
-class RarAnalyzer;
 
 struct ArchiveAnalyzerResults;
 using FinishedAnalysisCallback = base::OnceCallback<void()>;
@@ -78,7 +77,6 @@ class ZipAnalyzer {
   // DFS.
   // TODO(crbug.com/1426164) Create a common class to hold all analyzers.
   std::unique_ptr<safe_browsing::ZipAnalyzer> nested_zip_analyzer_;
-  std::unique_ptr<safe_browsing::RarAnalyzer> nested_rar_analyzer_;
 
   base::WeakPtrFactory<ZipAnalyzer> weak_factory_{this};
 };
