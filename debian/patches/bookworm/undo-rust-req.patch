Revert the following patch so that we don't actually need rust to build.

commit bcf739b95713071687ff25010683248de0092f6a
Author: Lukasz Anforowicz <lukasza@chromium.org>
Date:   Tue Nov 28 01:49:26 2023 +0000

    Remove `enable_rust_qr` build flag.
    
    QR code generator implemented in Rust has shipped to Windows, MacOS,
    Linux, and Android (see https://crrev.com/c/5061588) and is launching to
    ChromeOS.  This means that soon Rust toolchain will be required to build
    QR support in Chrome - this CL makes an early, small step in this
    direction by removing the `enable_rust_qr` build flag.
    
    Removing the `enable_rust_qr` build flag is a prerequisite for removing
    the C++ implementation of the QR code generator.  Removal of the C++
    implementation will not happen until ChromeOS launch process completes
    (hopefully in a month or so) but removing the `enable_rust_qr` build
    flag early should help to flush out any potential issues early (e.g.
    help to identify places where Rust toolchain needs to be added in
    third-party builds of Chromium).
    
    Bug: 1431991
    Change-Id: Ib612b96c153c0d311ce6c31ae0415a67c1a3f6a4
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5064208
    Reviewed-by: danakj <danakj@chromium.org>
    Commit-Queue: ≈Åukasz Anforowicz <lukasza@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1229679}

Index: chromium-122.0.6261.57/build/config/rust.gni
===================================================================
--- chromium-122.0.6261.57.orig/build/config/rust.gni
+++ chromium-122.0.6261.57/build/config/rust.gni
@@ -103,6 +103,9 @@ declare_args() {
   # Support for chrome://crash-rust to check crash dump collection works.
   enable_rust_crash = enable_rust
 
+  # Support for QR code generation - see https://crbug.com/1431991.
+  enable_rust_qr = enable_rust
+
   # Support for Rust mojo bindings.
   enable_rust_mojo = enable_rust && enable_all_rust_features
 
Index: chromium-122.0.6261.57/components/qr_code_generator/BUILD.gn
===================================================================
--- chromium-122.0.6261.57.orig/components/qr_code_generator/BUILD.gn
+++ chromium-122.0.6261.57/components/qr_code_generator/BUILD.gn
@@ -11,6 +11,11 @@ declare_args() {
   enable_qr_print = false
 }
 
+buildflag_header("rust_buildflags") {
+  header = "rust_buildflags.h"
+  flags = [ "ENABLE_RUST_QR=$enable_rust_qr" ]
+}
+
 # Separate target to:
 # - Limit `visibility` (stricter than dir-level `DEPS` would allow)
 # - Allow `//chrome/services/qr_code_generator_service/public/cpp` to check the
@@ -23,7 +28,10 @@ source_set("qr_code_generator_features")
     "features.cc",
     "features.h",
   ]
-  deps = [ "//base" ]
+  deps = [
+    ":rust_buildflags",
+    "//base",
+  ]
   visibility = [
     ":qr_code_generator",
     ":unit_tests",
@@ -40,19 +48,27 @@ source_set("qr_code_generator") {
   ]
   deps = [
     ":qr_code_generator_features",
-    ":qr_code_generator_ffi_glue",
+    ":rust_buildflags",
     "//base",
   ]
+  if (enable_rust_qr) {
+    deps += [
+      ":qr_code_generator_ffi_glue",
+      "//build/rust:cxx_cppdeps",
+    ]
+  }
   public_deps = [ "//base" ]
 }
 
-rust_static_library("qr_code_generator_ffi_glue") {
-  allow_unsafe = true  # Needed for FFI that underpins the `cxx` crate.
-  crate_root = "qr_code_generator_ffi_glue.rs"
-  sources = [ "qr_code_generator_ffi_glue.rs" ]
-  cxx_bindings = [ "qr_code_generator_ffi_glue.rs" ]
-  visibility = [ ":qr_code_generator" ]
-  deps = [ "//third_party/rust/qr_code/v2:lib" ]
+if (enable_rust_qr) {
+  rust_static_library("qr_code_generator_ffi_glue") {
+    allow_unsafe = true  # Needed for FFI that underpins the `cxx` crate.
+    crate_root = "qr_code_generator_ffi_glue.rs"
+    sources = [ "qr_code_generator_ffi_glue.rs" ]
+    cxx_bindings = [ "qr_code_generator_ffi_glue.rs" ]
+    visibility = [ ":qr_code_generator" ]
+    deps = [ "//third_party/rust/qr_code/v2:lib" ]
+  }
 }
 
 source_set("unit_tests") {
@@ -61,6 +77,7 @@ source_set("unit_tests") {
   deps = [
     ":qr_code_generator",
     ":qr_code_generator_features",
+    ":rust_buildflags",
     "//base",
     "//base/test:test_support",
     "//testing/gtest",
Index: chromium-122.0.6261.57/components/qr_code_generator/features.h
===================================================================
--- chromium-122.0.6261.57.orig/components/qr_code_generator/features.h
+++ chromium-122.0.6261.57/components/qr_code_generator/features.h
@@ -6,6 +6,7 @@
 #define COMPONENTS_QR_CODE_GENERATOR_FEATURES_H_
 
 #include "base/feature_list.h"
+#include "components/qr_code_generator/rust_buildflags.h"
 
 namespace qr_code_generator {
 
@@ -13,8 +14,10 @@ namespace qr_code_generator {
 // but product code should instead use `IsRustyQrCodeGeneratorFeatureEnabled`.
 BASE_DECLARE_FEATURE(kRustyQrCodeGeneratorFeature);
 
-// Returns true if Rust should be used for QR code generation - i.e. if
-// the `"RustyQrCodeGenerator"` base::Feature has been enabled.
+// Returns true if Rust should be used for QR code generation:
+// 1) the GN-level `enable_rust_qr` is true.
+// *and*
+// 2) the `"RustyQrCodeGenerator"` base::Feature has been enabled.
 //
 // If Rust is used for QR code generation then:
 // 1) //components/qr_code_generator becomes a thin wrapper around a 3rd-party
@@ -26,7 +29,11 @@ BASE_DECLARE_FEATURE(kRustyQrCodeGenerat
 // See https://crbug.com/1431991 for more details about the feature and the
 // Rust QR Code Generator project.
 inline bool IsRustyQrCodeGeneratorFeatureEnabled() {
+#if BUILDFLAG(ENABLE_RUST_QR)
   return base::FeatureList::IsEnabled(kRustyQrCodeGeneratorFeature);
+#else
+  return false;
+#endif
 }
 
 }  // namespace qr_code_generator
Index: chromium-122.0.6261.57/components/qr_code_generator/qr_code_generator.cc
===================================================================
--- chromium-122.0.6261.57.orig/components/qr_code_generator/qr_code_generator.cc
+++ chromium-122.0.6261.57/components/qr_code_generator/qr_code_generator.cc
@@ -11,12 +11,15 @@
 #include <vector>
 
 #include "base/check_op.h"
-#include "base/containers/span_rust.h"
 #include "base/memory/raw_ptr.h"
 #include "base/notreached.h"
 #include "base/numerics/safe_conversions.h"
 #include "components/qr_code_generator/features.h"
+
+#if BUILDFLAG(ENABLE_RUST_QR)
+#include "base/containers/span_rust.h"
 #include "components/qr_code_generator/qr_code_generator_ffi_glue.rs.h"
+#endif
 
 namespace qr_code_generator {
 
@@ -572,6 +575,7 @@ size_t SegmentSpanLength(base::span<cons
   return sum;
 }
 
+#if BUILDFLAG(ENABLE_RUST_QR)
 absl::optional<QRCodeGenerator::GeneratedCode> GenerateQrCodeUsingRust(
     base::span<const uint8_t> in,
     absl::optional<int> min_version) {
@@ -596,6 +600,7 @@ absl::optional<QRCodeGenerator::Generate
   CHECK_EQ(code.data.size(), static_cast<size_t>(code.qr_size * code.qr_size));
   return code;
 }
+#endif
 
 }  // namespace
 
@@ -614,7 +619,11 @@ absl::optional<QRCodeGenerator::Generate
     base::span<const uint8_t> in,
     absl::optional<int> min_version) {
   if (IsRustyQrCodeGeneratorFeatureEnabled()) {
+#if BUILDFLAG(ENABLE_RUST_QR)
     return GenerateQrCodeUsingRust(in, min_version);
+#else
+    CHECK(false);  // The `if` condition guarantees `ENABLE_RUST_QR`.
+#endif
   }
 
   if (in.size() > kMaxInputSize) {
Index: chromium-122.0.6261.57/components/qr_code_generator/qr_code_generator_unittest.cc
===================================================================
--- chromium-122.0.6261.57.orig/components/qr_code_generator/qr_code_generator_unittest.cc
+++ chromium-122.0.6261.57/components/qr_code_generator/qr_code_generator_unittest.cc
@@ -331,9 +331,12 @@ TEST_P(QRCodeGeneratorTest, InvalidMinVe
   ASSERT_FALSE(qr.Generate(huge_input, std::make_optional(-1)));
 }
 
+#if BUILDFLAG(ENABLE_RUST_QR)
 INSTANTIATE_TEST_SUITE_P(RustEnabled,
                          QRCodeGeneratorTest,
                          ::testing::Values(RustFeatureState::kRustEnabled));
+#endif
+
 INSTANTIATE_TEST_SUITE_P(RustDisabled,
                          QRCodeGeneratorTest,
                          ::testing::Values(RustFeatureState::kRustDisabled));
