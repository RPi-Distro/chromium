honestly, we're just including this one to make diffs easier; it's just
formatting changes.

commit 4a93c3d45e841fd3eb26201298eaea7300c7adca
Author: Munira Tursunova <moonira@google.com>
Date:   Wed Mar 27 14:13:13 2024 +0000

    Format harfbuzz_face.cc & harfbuzz_shaper.cc
    
    Change-Id: I5a340d75aee4f0945188719a47359c05909008d6
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5397682
    Commit-Queue: Munira Tursunova <moonira@google.com>
    Reviewed-by: Dominik Röttsches <drott@chromium.org>
    Commit-Queue: Dominik Röttsches <drott@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1278929}

--- a/third_party/blink/renderer/platform/fonts/shaping/harfbuzz_face.cc
+++ b/third_party/blink/renderer/platform/fonts/shaping/harfbuzz_face.cc
@@ -87,10 +87,8 @@ static hb_bool_t HarfBuzzGetGlyph(hb_fon
       reinterpret_cast<HarfBuzzFontData*>(font_data);
 
   CHECK(hb_font_data);
-  if (hb_font_data->range_set_ &&
-      !hb_font_data->range_set_->Contains(unicode)) {
+  if (hb_font_data->range_set_ && !hb_font_data->range_set_->Contains(unicode))
     return false;
-  }
 
   // If the system fonts do not have a glyph coverage for line separator
   // (0x2028) or paragraph separator (0x2029), missing glyph would be displayed
@@ -203,9 +201,8 @@ static hb_bool_t HarfBuzzGetGlyphVertica
   HarfBuzzFontData* hb_font_data =
       reinterpret_cast<HarfBuzzFontData*>(font_data);
   OpenTypeVerticalData* vertical_data = hb_font_data->VerticalData();
-  if (!vertical_data) {
+  if (!vertical_data)
     return false;
-  }
 
   float result[] = {0, 0};
   Glyph the_glyph = glyph;
@@ -252,9 +249,8 @@ static inline bool TableHasSpace(hb_face
   for (unsigned i = 0; i < count; i++) {
     hb_ot_layout_lookup_collect_glyphs(face, tag, i, glyphs, glyphs, glyphs,
                                        nullptr);
-    if (hb_set_has(glyphs, space)) {
+    if (hb_set_has(glyphs, space))
       return true;
-    }
   }
   return false;
 }
@@ -374,12 +370,10 @@ class HarfBuzzSkiaFontFuncs final {
     DCHECK_EQ(num_tags, returned_tags);
 
     for (auto& tag : tags) {
-      if (tag == SkSetFourByteTag('t', 'r', 'a', 'k')) {
+      if (tag == SkSetFourByteTag('t', 'r', 'a', 'k'))
         has_trak = true;
-      }
-      if (tag == SkSetFourByteTag('s', 'b', 'i', 'x')) {
+      if (tag == SkSetFourByteTag('s', 'b', 'i', 'x'))
         has_sbix = true;
-      }
     }
 
     return has_trak && !has_sbix ? hb_font_funcs_harfbuzz_advances_
@@ -459,9 +453,8 @@ static hb_blob_t* HarfBuzzSkiaGetTable(h
 
   char* buffer = reinterpret_cast<char*>(WTF::Partitions::FastMalloc(
       table_size, WTF_HEAP_PROFILER_TYPE_NAME(HarfBuzzFontData)));
-  if (!buffer) {
+  if (!buffer)
     return nullptr;
-  }
   size_t actual_size = typeface->getTableData(tag, 0, table_size, buffer);
   if (table_size != actual_size) {
     WTF::Partitions::FastFree(buffer);
--- a/third_party/blink/renderer/platform/fonts/shaping/harfbuzz_shaper.cc
+++ b/third_party/blink/renderer/platform/fonts/shaping/harfbuzz_shaper.cc
@@ -86,10 +86,8 @@ void CheckShapeResultRange(const ShapeRe
   DCHECK_LE(start, end);
   unsigned length = end - start;
   if (length == result->NumCharacters() &&
-      (!length ||
-       (start == result->StartIndex() && end == result->EndIndex()))) {
+      (!length || (start == result->StartIndex() && end == result->EndIndex())))
     return;
-  }
 
   // Log font-family/size as specified.
   StringBuilder log;
@@ -111,9 +109,8 @@ void CheckShapeResultRange(const ShapeRe
   // Log the text to shape.
   log.AppendFormat(": %u-%u -> %u-%u:", start, end, result->StartIndex(),
                    result->EndIndex());
-  for (unsigned i = start; i < end; ++i) {
+  for (unsigned i = start; i < end; ++i)
     log.AppendFormat(" %02X", text[i]);
-  }
 
   log.Append(", result=");
   result->ToString(&log);
@@ -257,9 +254,8 @@ namespace {
 // A port of hb_icu_script_to_script because harfbuzz on CrOS is built
 // without hb-icu. See http://crbug.com/356929
 static inline hb_script_t ICUScriptToHBScript(UScriptCode script) {
-  if (UNLIKELY(script == USCRIPT_INVALID_CODE)) {
+  if (UNLIKELY(script == USCRIPT_INVALID_CODE))
     return HB_SCRIPT_INVALID;
-  }
 
   return hb_script_from_string(uscript_getShortName(script), -1);
 }
@@ -335,9 +331,8 @@ inline bool ShapeRange(hb_buffer_t* buff
                               : HarfBuzzFace::kNoVerticalLayout,
                           specified_size);
   hb_shape(hb_font, buffer, argument_features.data(), argument_features.size());
-  if (!face->ShouldSubpixelPosition()) {
+  if (!face->ShouldSubpixelPosition())
     RoundHarfBuzzBufferPositions(buffer);
-  }
 
   return true;
 }
@@ -453,9 +448,8 @@ void HarfBuzzShaper::CommitGlyphs(RangeC
     unsigned next_num_glyphs =
         current_slice->num_glyphs -
         (next_start_glyph - current_slice->start_glyph_index);
-    if (!next_num_glyphs) {
+    if (!next_num_glyphs)
       break;
-    }
 
     // If the slice exceeds the limit a RunInfo can store, create another
     // RunInfo for the rest of the slice.
@@ -468,9 +462,8 @@ void HarfBuzzShaper::CommitGlyphs(RangeC
     // The |InsertRun| has truncated the right end. In LTR, advance the
     // |run_start_index| because the end characters are truncated. In RTL, keep
     // the same |run_start_index| because the start characters are truncated.
-    if (HB_DIRECTION_IS_FORWARD(direction)) {
+    if (HB_DIRECTION_IS_FORWARD(direction))
       run_start_index = next_slice.start_character_index;
-    }
   }
   if (fallback_stage == kLast) {
     range_data->font->ReportNotDefGlyph();
@@ -500,9 +493,8 @@ void HarfBuzzShaper::ExtractShapeResults
   unsigned last_change_glyph_index = 0;
   unsigned previous_cluster_start_glyph_index = 0;
 
-  if (!num_glyphs) {
+  if (!num_glyphs)
     return;
-  }
 
   const Glyph space_glyph = current_font->SpaceGlyph();
   for (unsigned glyph_index = 0; glyph_index < num_glyphs; ++glyph_index) {
@@ -617,18 +609,16 @@ bool HarfBuzzShaper::CollectFallbackHint
     const Deque<ReshapeQueueItem>& reshape_queue,
     bool needs_hint_list,
     Vector<UChar32>& hint) const {
-  if (reshape_queue.empty()) {
+  if (reshape_queue.empty())
     return false;
-  }
 
   // Clear without releasing the capacity to avoid reallocations.
   hint.resize(0);
 
   size_t num_chars_added = 0;
   for (auto it = reshape_queue.begin(); it != reshape_queue.end(); ++it) {
-    if (it->action_ == kReshapeQueueNextFont) {
+    if (it->action_ == kReshapeQueueNextFont)
       break;
-    }
 
     CHECK_LE((it->start_index_ + it->num_characters_), text_.length());
     if (text_.Is8Bit()) {
@@ -641,9 +631,8 @@ bool HarfBuzzShaper::CollectFallbackHint
         // FontFallbackIterator needs a character with a determined script to
         // perform meaningful system fallback.
         if (!needs_hint_list &&
-            Character::HasDefiniteScript(text_[it->start_index_ + i])) {
+            Character::HasDefiniteScript(text_[it->start_index_ + i]))
           return true;
-        }
       }
       continue;
     }
@@ -660,9 +649,8 @@ bool HarfBuzzShaper::CollectFallbackHint
       // managed to find a character with a definite script since
       // FontFallbackIterator needs a character with a determined script to
       // perform meaningful system fallback.
-      if (!needs_hint_list && Character::HasDefiniteScript(hint_char)) {
+      if (!needs_hint_list && Character::HasDefiniteScript(hint_char))
         return true;
-      }
       iterator.Advance();
     }
   }
@@ -845,9 +833,8 @@ void HarfBuzzShaper::ShapeSegment(
         // a substring.
         if (range_data->start >= current_queue_item.start_index_ +
                                      current_queue_item.num_characters_ ||
-            range_data->end <= current_queue_item.start_index_) {
+            range_data->end <= current_queue_item.start_index_)
           continue;
-        }
       }
     }
 
@@ -866,9 +853,8 @@ void HarfBuzzShaper::ShapeSegment(
     CaseMapIntend case_map_intend = CaseMapIntend::kKeepSameCase;
     if (needs_caps_handling) {
       case_map_intend = caps_support.NeedsCaseChange(small_caps_behavior);
-      if (caps_support.NeedsSyntheticFont(small_caps_behavior)) {
+      if (caps_support.NeedsSyntheticFont(small_caps_behavior))
         adjusted_font = font_data->SmallCapsFontData(font_description);
-      }
     }
 
     CaseMappingHarfBuzzBufferFiller(
@@ -897,9 +883,8 @@ void HarfBuzzShaper::ShapeSegment(
     if (!ShapeRange(range_data->buffer, range_data->font_features,
                     adjusted_font, current_font_data_for_range_set->Ranges(),
                     segment.script, direction, language,
-                    font_description.SpecifiedSize())) {
+                    font_description.SpecifiedSize()))
       DLOG(ERROR) << "Shaping range failed.";
-    }
 
     ExtractShapeResults(range_data, font_cycle_queued, current_queue_item,
                         adjusted_font, segment.script, canvas_rotation,
@@ -955,16 +940,14 @@ ShapeResult* HarfBuzzShaper::Shape(const
     while (run_segmenter.Consume(&segment_range)) {
       // Only shape segments overlapping with the range indicated by start and
       // end. Not only those strictly within.
-      if (start < segment_range.end && end > segment_range.start) {
+      if (start < segment_range.end && end > segment_range.start)
         ShapeSegment(&range_data, segment_range, result);
-      }
 
       // Break if beyond the requested range. Because RunSegmenter is
       // incremental, further ranges are not needed. This also allows reusing
       // the segmenter state for next incremental calls.
-      if (segment_range.end >= end) {
+      if (segment_range.end >= end)
         break;
-      }
     }
   }
 
