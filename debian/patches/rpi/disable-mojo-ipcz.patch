author: Andres Salomon <dilinger@debian.org>
description: disable kMojoIpcz to fix trap runtime error on i386

See https://bugs.debian.org/1034406

--- a/mojo/core/embedder/features.cc
+++ b/mojo/core/embedder/features.cc
@@ -36,7 +36,7 @@ BASE_FEATURE(kMojoInlineMessagePayloads,
 #if BUILDFLAG(IS_CHROMEOS)
 BASE_FEATURE(kMojoIpcz, "MojoIpcz", base::FEATURE_DISABLED_BY_DEFAULT);
 #else
-BASE_FEATURE(kMojoIpcz, "MojoIpcz", base::FEATURE_ENABLED_BY_DEFAULT);
+BASE_FEATURE(kMojoIpcz, "MojoIpcz", base::FEATURE_DISABLED_BY_DEFAULT);
 #endif
 
 BASE_FEATURE(kMojoIpczMemV2,
--- a/mojo/core/embedder/embedder.cc
+++ b/mojo/core/embedder/embedder.cc
@@ -167,12 +167,13 @@ bool IsMojoIpczEnabled() {
   // and DCHECK that every subsequent call produces the same result. Note that
   // setting `disable_ipcz` in the Mojo config overrides both the Feature value
   // and the environment variable if set.
-  const bool enabled = (g_mojo_ipcz_enabled.load(std::memory_order_acquire) ||
-                        IsMojoIpczForceEnabledByEnvironment()) &&
-                       !g_mojo_ipcz_force_disabled;
-  static bool enabled_on_first_call = enabled;
-  DCHECK_EQ(enabled, enabled_on_first_call);
-  return enabled;
+  //const bool enabled = (g_mojo_ipcz_enabled.load(std::memory_order_acquire) ||
+  //                      IsMojoIpczForceEnabledByEnvironment()) &&
+  //                     !g_mojo_ipcz_force_disabled;
+  //static bool enabled_on_first_call = enabled;
+  //DCHECK_EQ(enabled, enabled_on_first_call);
+  //return enabled;
+  return false;
 }
 
 void InstallMojoIpczBaseSharedMemoryHooks() {
