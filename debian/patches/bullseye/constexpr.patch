author: Andres Salomon <dilinger@debian.org>
description: work around build failure with bullseye's clang/libstdc++


In file included from ../../chrome/common/channel_info.cc:7:
../../components/version_info/version_info.h:30:23: error: constexpr function's return type 'std::string' (aka 'basic_string<char>') is not a literal type
constexpr std::string GetProductName() {
                      ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/bits/basic_string.h:77:11: note: 'basic_string<char>' is not literal because it is not an aggregate and has no constexpr constructors other than copy or move constructors
    class basic_string
          ^



--- a/components/version_info/version_info.h
+++ b/components/version_info/version_info.h
@@ -27,18 +27,18 @@ const std::string GetProductNameAndVersi
     const std::string& build_version);
 
 // Returns the product name, e.g. "Chromium" or "Google Chrome".
-constexpr std::string GetProductName() {
+static const std::string GetProductName() {
   return PRODUCT_NAME;
 }
 
 // Returns the version number, e.g. "6.0.490.1".
-constexpr std::string GetVersionNumber() {
+static const std::string GetVersionNumber() {
   return PRODUCT_VERSION;
 }
 
 // Returns the product name and version information for the User-Agent header,
 // in the format: Chrome/<major_version>.<minor_version>.<build>.<patch>.
-constexpr std::string GetProductNameAndVersionForUserAgent() {
+static const std::string GetProductNameAndVersionForUserAgent() {
   return "Chrome/" + GetVersionNumber();
 }
 
@@ -53,7 +53,7 @@ std::string GetMajorVersionNumber();
 const base::Version& GetVersion();
 
 // Returns a version control specific identifier of this release.
-constexpr std::string GetLastChange() {
+static const std::string GetLastChange() {
   return LAST_CHANGE;
 }
 
@@ -65,7 +65,7 @@ constexpr bool IsOfficialBuild() {
 }
 
 // Returns the OS type, e.g. "Windows", "Linux", "FreeBSD", ...
-constexpr std::string GetOSType() {
+static const std::string GetOSType() {
 #if BUILDFLAG(IS_WIN)
   return "Windows";
 #elif BUILDFLAG(IS_IOS)
@@ -97,7 +97,7 @@ constexpr std::string GetOSType() {
 
 // Returns a string equivalent of |channel|, independent of whether the build
 // is branded or not and without any additional modifiers.
-constexpr std::string GetChannelString(Channel channel) {
+static const std::string GetChannelString(Channel channel) {
   switch (channel) {
     case Channel::STABLE:
       return "stable";
@@ -114,7 +114,7 @@ constexpr std::string GetChannelString(C
 }
 
 // Returns a list of sanitizers enabled in this build.
-constexpr std::string GetSanitizerList() {
+static const std::string GetSanitizerList() {
   return ""
 #if defined(ADDRESS_SANITIZER)
          "address "
