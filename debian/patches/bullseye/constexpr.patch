author: Andres Salomon <dilinger@debian.org>
description: work around build failure with bullseye's clang/libstdc++


In file included from ../../chrome/common/channel_info.cc:7:
../../components/version_info/version_info.h:30:23: error: constexpr function's return type 'std::string' (aka 'basic_string<char>') is not a literal type
constexpr std::string GetProductName() {
                      ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/bits/basic_string.h:77:11: note: 'basic_string<char>' is not literal because it is not an aggregate and has no constexpr constructors other than copy or move constructors
    class basic_string
          ^



--- a/components/version_info/version_info.h
+++ b/components/version_info/version_info.h
@@ -28,18 +28,18 @@ const std::string GetProductNameAndVersi
     const std::string& build_version);
 
 // Returns the product name, e.g. "Chromium" or "Google Chrome".
-constexpr base::StringPiece GetProductName() {
+static const base::StringPiece GetProductName() {
   return PRODUCT_NAME;
 }
 
 // Returns the version number, e.g. "6.0.490.1".
-constexpr base::StringPiece GetVersionNumber() {
+static const base::StringPiece GetVersionNumber() {
   return PRODUCT_VERSION;
 }
 
 // Returns the product name and version information for the User-Agent header,
 // in the format: Chrome/<major_version>.<minor_version>.<build>.<patch>.
-constexpr base::StringPiece GetProductNameAndVersionForUserAgent() {
+static const base::StringPiece GetProductNameAndVersionForUserAgent() {
   return "Chrome/" PRODUCT_VERSION;
 }
 
@@ -54,7 +54,7 @@ std::string GetMajorVersionNumber();
 const base::Version& GetVersion();
 
 // Returns a version control specific identifier of this release.
-constexpr base::StringPiece GetLastChange() {
+static const base::StringPiece GetLastChange() {
   return LAST_CHANGE;
 }
 
@@ -66,7 +66,7 @@ constexpr bool IsOfficialBuild() {
 }
 
 // Returns the OS type, e.g. "Windows", "Linux", "FreeBSD", ...
-constexpr base::StringPiece GetOSType() {
+static const base::StringPiece GetOSType() {
 #if BUILDFLAG(IS_WIN)
   return "Windows";
 #elif BUILDFLAG(IS_IOS)
@@ -98,7 +98,7 @@ constexpr base::StringPiece GetOSType()
 
 // Returns a string equivalent of |channel|, independent of whether the build
 // is branded or not and without any additional modifiers.
-constexpr base::StringPiece GetChannelString(Channel channel) {
+static const base::StringPiece GetChannelString(Channel channel) {
   switch (channel) {
     case Channel::STABLE:
       return "stable";
@@ -115,7 +115,7 @@ constexpr base::StringPiece GetChannelSt
 }
 
 // Returns a list of sanitizers enabled in this build.
-constexpr base::StringPiece GetSanitizerList() {
+static const base::StringPiece GetSanitizerList() {
   return ""
 #if defined(ADDRESS_SANITIZER)
          "address "
--- a/components/miracle_parameter/common/public/miracle_parameter.h
+++ b/components/miracle_parameter/common/public/miracle_parameter.h
@@ -93,7 +93,7 @@
 template <>
 class MiracleParameter<std::string> : public MiracleParameterBase<std::string> {
  public:
-  constexpr MiracleParameter(const base::Feature* feature,
+  MiracleParameter(const base::Feature* feature,
                              const char* param_name,
                              std::string default_value)
       : MiracleParameterBase(feature, param_name, std::move(default_value)) {}
