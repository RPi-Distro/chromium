description: clang-16 workaround
author: Andres Salomon <dilinger@debian.org>

../../components/performance_manager/resource_attribution/query_params.h:30:21: error: return type for defaulted equality comparison operator must be 'bool', not 'const bool'
  friend const bool operator==(const QueryParams&,
               ~~~~ ^

I thought we were done with constexpr workarounds after upgrading to clang-16,
but apparently we still have some issues with the equality operator.

--- a/components/performance_manager/resource_attribution/query_params.h
+++ b/components/performance_manager/resource_attribution/query_params.h
@@ -17,7 +17,7 @@ struct QueryParams {
   QueryParams(const QueryParams& other);
   QueryParams& operator=(const QueryParams& other);
 
-  friend constexpr bool operator==(const QueryParams&,
+  friend bool operator==(const QueryParams&,
                                    const QueryParams&) = default;
 
   // Resource types to measure.
--- a/base/types/strong_alias.h
+++ b/base/types/strong_alias.h
@@ -110,7 +110,7 @@ class StrongAlias {
   // a `StrongAlias<W>`.
   friend constexpr auto operator<=>(const StrongAlias& lhs,
                                     const StrongAlias& rhs) = default;
-  friend constexpr bool operator==(const StrongAlias& lhs,
+  friend bool operator==(const StrongAlias& lhs,
                                    const StrongAlias& rhs) = default;
 
   // Hasher to use in std::unordered_map, std::unordered_set, etc.
--- a/components/autofill/core/common/unique_ids.h
+++ b/components/autofill/core/common/unique_ids.h
@@ -137,7 +137,7 @@ struct GlobalId {
 
   friend constexpr auto operator<=>(const GlobalId<RendererId>& lhs,
                                     const GlobalId<RendererId>& rhs) = default;
-  friend constexpr bool operator==(const GlobalId<RendererId>& lhs,
+  friend bool operator==(const GlobalId<RendererId>& lhs,
                                    const GlobalId<RendererId>& rhs) = default;
 };
 
--- a/components/performance_manager/resource_attribution/context_collection.h
+++ b/components/performance_manager/resource_attribution/context_collection.h
@@ -28,7 +28,7 @@ class ContextCollection {
   ContextCollection(const ContextCollection& other);
   ContextCollection& operator=(const ContextCollection& other);
 
-  friend constexpr bool operator==(const ContextCollection&,
+  friend bool operator==(const ContextCollection&,
                                    const ContextCollection&) = default;
 
   // Adds `context` to the collection.
