author: Andres Salomon <dilinger@debian.org>
description: work around a clang-13 issue...

../../components/password_manager/core/browser/affiliation/affiliation_fetcher_base.cc:182:6: error: equality comparison operator can only be defaulted in a class definition
bool operator==(const AffiliationFetcherInterface::RequestInfo& lhs,
     ^
1 error generated.


Just move the default assignment from the class definitions
to the class declarations. This isn't necessary with clang-14.

--- a/components/password_manager/core/browser/affiliation/affiliation_fetcher_base.cc
+++ b/components/password_manager/core/browser/affiliation/affiliation_fetcher_base.cc
@@ -179,7 +179,5 @@ void AffiliationFetcherBase::OnSimpleLoa
   }
 }
 
-bool operator==(const AffiliationFetcherInterface::RequestInfo& lhs,
-                const AffiliationFetcherInterface::RequestInfo& rhs) = default;
 
 }  // namespace password_manager
--- a/components/password_manager/core/browser/affiliation/affiliation_fetcher_base.h
+++ b/components/password_manager/core/browser/affiliation/affiliation_fetcher_base.h
@@ -80,9 +80,6 @@ class AffiliationFetcherBase : public vi
   std::unique_ptr<network::SimpleURLLoader> simple_url_loader_;
 };
 
-bool operator==(const AffiliationFetcherInterface::RequestInfo& lhs,
-                const AffiliationFetcherInterface::RequestInfo& rhs);
-
 }  // namespace password_manager
 
 #endif  // COMPONENTS_PASSWORD_MANAGER_CORE_BROWSER_AFFILIATION_AFFILIATION_FETCHER_BASE_H_
--- a/components/password_manager/core/browser/affiliation/affiliation_fetcher_interface.h
+++ b/components/password_manager/core/browser/affiliation/affiliation_fetcher_interface.h
@@ -20,7 +20,7 @@ class AffiliationFetcherInterface {
     bool change_password_info = false;
     bool psl_extension_list = false;
 
-    friend bool operator==(const RequestInfo&, const RequestInfo&);
+    friend bool operator==(const RequestInfo&, const RequestInfo&) = default;
   };
 
   AffiliationFetcherInterface() = default;
--- a/components/password_manager/core/browser/password_form.cc
+++ b/components/password_manager/core/browser/password_form.cc
@@ -230,7 +230,6 @@ AlternativeElement& AlternativeElement::
 
 AlternativeElement::~AlternativeElement() = default;
 
-bool AlternativeElement::operator==(const AlternativeElement&) const = default;
 
 bool AlternativeElement::operator<(const AlternativeElement& other) const {
   return std::tie(value, field_renderer_id, name) <
--- a/components/password_manager/core/browser/password_form.h
+++ b/components/password_manager/core/browser/password_form.h
@@ -44,7 +44,7 @@ struct AlternativeElement {
   AlternativeElement& operator=(AlternativeElement&& rhs);
   ~AlternativeElement();
 
-  bool operator==(const AlternativeElement&) const;
+  bool operator==(const AlternativeElement&) const = default;
   bool operator<(const AlternativeElement&) const;
 
   // The value of the field.
--- a/components/password_manager/core/browser/passkey_credential.cc
+++ b/components/password_manager/core/browser/passkey_credential.cc
@@ -81,7 +81,5 @@ int PasskeyCredential::GetAuthenticatorL
   }
 }
 
-bool operator==(const PasskeyCredential& lhs,
-                const PasskeyCredential& rhs) = default;
 
 }  // namespace password_manager
--- a/components/password_manager/core/browser/passkey_credential.h
+++ b/components/password_manager/core/browser/passkey_credential.h
@@ -84,7 +84,6 @@ class PasskeyCredential {
   std::string display_name_;
 };
 
-bool operator==(const PasskeyCredential& lhs, const PasskeyCredential& rhs);
 
 }  // namespace password_manager
 
--- a/net/cert/x509_cert_types.cc
+++ b/net/cert/x509_cert_types.cc
@@ -17,7 +17,6 @@ CertPrincipal::CertPrincipal(CertPrincip
 
 CertPrincipal::~CertPrincipal() = default;
 
-bool CertPrincipal::operator==(const CertPrincipal& other) const = default;
 
 bool CertPrincipal::EqualsForTesting(const CertPrincipal& other) const {
   return *this == other;
--- a/net/cert/x509_cert_types.h
+++ b/net/cert/x509_cert_types.h
@@ -54,7 +54,7 @@ struct NET_EXPORT CertPrincipal {
  private:
   // Comparison operator is private and only defined for use by
   // EqualsForTesting, see comment there for more details.
-  bool operator==(const CertPrincipal& other) const;
+  bool operator==(const CertPrincipal& other) const = default;
 };
 
 }  // namespace net
