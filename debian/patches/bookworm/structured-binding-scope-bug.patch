author: Andres Salomon <dilinger@debian.org>
description: work around https://github.com/llvm/llvm-project/issues/48582

../../media/base/cdm_promise_adapter.cc:99:66: error: reference to local binding 'promise_id' declared in enclosing function 'media::CdmPromiseAdapter::Clear'
        "media", "CdmPromise", TRACE_ID_WITH_SCOPE("CdmPromise", promise_id),
                                                                 ^
../../media/base/cdm_promise_adapter.cc:97:15: note: 'promise_id' declared here
  for (auto& [promise_id, promise] : promises_) {
              ^

This is some kind of clang14 scope bug, whereby variable are defined
in a structured binding, and then used inside of a (valid, but) different
scope. Eg,
  auto& [foo, bar, baz] = sizing_tree->CreateSizingData();
  do { auto& x = bar; } while (0);
  auto x = [&](GridTrackSizingDirection lambdavar) {
    for (auto& i : foo) { ... } 
  }
The compiler gets confused about scope and spits out an error. The
workaround is to define the variable not in a structured binding.

--- a/media/base/cdm_promise_adapter.cc
+++ b/media/base/cdm_promise_adapter.cc
@@ -94,7 +94,9 @@ void CdmPromiseAdapter::RejectPromise(ui
 void CdmPromiseAdapter::Clear(ClearReason reason) {
   // Reject all outstanding promises.
   DCHECK(thread_checker_.CalledOnValidThread());
-  for (auto& [promise_id, promise] : promises_) {
+  for (auto& [p_id, p] : promises_) {
+    auto& promise_id = p_id;
+    auto& promise = p;
     TRACE_EVENT_NESTABLE_ASYNC_END1(
         "media", "CdmPromise", TRACE_ID_WITH_SCOPE("CdmPromise", promise_id),
         "status", "cleared");
--- a/third_party/blink/renderer/core/layout/ng/grid/ng_grid_layout_algorithm.cc
+++ b/third_party/blink/renderer/core/layout/ng/grid/ng_grid_layout_algorithm.cc
@@ -520,8 +520,9 @@ wtf_size_t NGGridLayoutAlgorithm::BuildG
                                 row_auto_repetitions);
 
   bool has_nested_subgrid = false;
-  auto& [grid_items, layout_data, subtree_size] =
+  auto& [g_i, layout_data, subtree_size] =
       sizing_tree->CreateSizingData(opt_subgrid_data);
+  auto& grid_items = g_i;
 
   if (!must_ignore_children) {
     // Construct grid items that are not subgridded.
--- a/third_party/blink/renderer/core/layout/ng/grid/ng_grid_layout_algorithm.cc
+++ b/third_party/blink/renderer/core/layout/ng/grid/ng_grid_layout_algorithm.cc
@@ -520,9 +520,10 @@ wtf_size_t NGGridLayoutAlgorithm::BuildG
                                 row_auto_repetitions);
 
   bool has_nested_subgrid = false;
-  auto& [g_i, layout_data, subtree_size] =
+  auto& [g_i, l_d, subtree_size] =
       sizing_tree->CreateSizingData(opt_subgrid_data);
   auto& grid_items = g_i;
+  auto& layout_data = l_d;
 
   if (!must_ignore_children) {
     // Construct grid items that are not subgridded.
@@ -1641,8 +1642,10 @@ void NGGridLayoutAlgorithm::InitializeTr
     const absl::optional<GridTrackSizingDirection>& opt_track_direction) const {
   DCHECK(sizing_subtree);
 
-  auto& [grid_items, layout_data, subtree_size] =
+  auto& [g_i, l_d, subtree_size] =
       sizing_subtree.SubtreeRootData();
+  auto& grid_items = g_i;
+  auto& layout_data = l_d;
 
   auto InitAndCacheTrackSizes = [&](GridTrackSizingDirection track_direction) {
     InitializeTrackCollection(opt_subgrid_data, track_direction, &layout_data);
