author: Andres Salomon <dilinger@debian.org>

Revert c1dc375391403442935f1305f5a9782dd1c33f3a
"Introduce CreateBrotliSourceStreamWithDictionary() method", since we don't
have a new-enough git snapshot of brotli. The last brotli release was in
Aug 2020, and chromium has switched to a git snapshot from May 2022.


--- a/net/filter/brotli_source_stream.cc
+++ b/net/filter/brotli_source_stream.cc
@@ -2,8 +2,6 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#include <utility>
-
 #include "net/filter/brotli_source_stream.h"
 
 #include "base/bit_cast.h"
@@ -13,7 +11,6 @@
 #include "base/metrics/histogram_macros.h"
 #include "net/base/io_buffer.h"
 #include "third_party/brotli/include/brotli/decode.h"
-#include "third_party/brotli/include/brotli/shared_dictionary.h"
 
 namespace net {
 
@@ -25,20 +22,10 @@ const char kBrotli[] = "BROTLI";
 // Brotli format specification: http://www.ietf.org/id/draft-alakuijala-brotli.
 class BrotliSourceStream : public FilterSourceStream {
  public:
-  explicit BrotliSourceStream(std::unique_ptr<SourceStream> upstream,
-                              scoped_refptr<IOBuffer> dictionary = nullptr,
-                              size_t dictionary_size = 0u)
-      : FilterSourceStream(SourceStream::TYPE_BROTLI, std::move(upstream)),
-        dictionary_(std::move(dictionary)),
-        dictionary_size_(dictionary_size) {
+  explicit BrotliSourceStream(std::unique_ptr<SourceStream> upstream)
+      : FilterSourceStream(SourceStream::TYPE_BROTLI, std::move(upstream)) {
     brotli_state_ =
         BrotliDecoderCreateInstance(AllocateMemory, FreeMemory, this);
-    if (dictionary_) {
-      BROTLI_BOOL result = BrotliDecoderAttachDictionary(
-          brotli_state_, BROTLI_SHARED_DICTIONARY_RAW, dictionary_size_,
-          reinterpret_cast<const unsigned char*>(dictionary_->data()));
-      CHECK(result);
-    }
     CHECK(brotli_state_);
   }
 
@@ -176,9 +163,6 @@ class BrotliSourceStream : public Filter
     free(&array[-1]);
   }
 
-  const scoped_refptr<IOBuffer> dictionary_;
-  const size_t dictionary_size_;
-
   raw_ptr<BrotliDecoderState, DanglingUntriaged> brotli_state_;
 
   DecodingStatus decoding_status_ = DecodingStatus::DECODING_IN_PROGRESS;
@@ -196,12 +180,4 @@ std::unique_ptr<FilterSourceStream> Crea
   return std::make_unique<BrotliSourceStream>(std::move(previous));
 }
 
-std::unique_ptr<FilterSourceStream> CreateBrotliSourceStreamWithDictionary(
-    std::unique_ptr<SourceStream> previous,
-    scoped_refptr<IOBuffer> dictionary,
-    size_t dictionary_size) {
-  return std::make_unique<BrotliSourceStream>(
-      std::move(previous), std::move(dictionary), dictionary_size);
-}
-
 }  // namespace net
--- a/net/filter/brotli_source_stream.h
+++ b/net/filter/brotli_source_stream.h
@@ -7,8 +7,6 @@
 
 #include <memory>
 
-#include "base/memory/scoped_refptr.h"
-#include "net/base/io_buffer.h"
 #include "net/base/net_export.h"
 #include "net/filter/filter_source_stream.h"
 #include "net/filter/source_stream.h"
@@ -18,11 +16,6 @@ namespace net {
 NET_EXPORT_PRIVATE std::unique_ptr<FilterSourceStream> CreateBrotliSourceStream(
     std::unique_ptr<SourceStream> upstream);
 
-NET_EXPORT_PRIVATE std::unique_ptr<FilterSourceStream>
-CreateBrotliSourceStreamWithDictionary(std::unique_ptr<SourceStream> upstream,
-                                       scoped_refptr<IOBuffer> dictionary,
-                                       size_t dictionary_size);
-
 }  // namespace net
 
 #endif  // NET_FILTER_BROTLI_SOURCE_STREAM_H_
--- a/net/filter/brotli_source_stream_disabled.cc
+++ b/net/filter/brotli_source_stream_disabled.cc
@@ -11,11 +11,4 @@ std::unique_ptr<FilterSourceStream> Crea
   return nullptr;
 }
 
-std::unique_ptr<FilterSourceStream> CreateBrotliSourceStreamWithDictionary(
-    std::unique_ptr<SourceStream> previous,
-    scoped_refptr<IOBuffer> dictionary,
-    size_t dictionary_size) {
-  return nullptr;
-}
-
 }  // namespace net
--- a/net/filter/brotli_source_stream_fuzzer.cc
+++ b/net/filter/brotli_source_stream_fuzzer.cc
@@ -18,25 +18,10 @@
 extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
   net::TestCompletionCallback callback;
   FuzzedDataProvider data_provider(data, size);
-
-  const bool is_shared_dictionary = data_provider.ConsumeBool();
-  std::unique_ptr<net::SourceStream> brotli_stream;
-
-  if (is_shared_dictionary) {
-    const std::string dictionary = data_provider.ConsumeRandomLengthString();
-    scoped_refptr<net::IOBuffer> dictionary_buffer =
-        base::MakeRefCounted<net::StringIOBuffer>(dictionary);
-    auto fuzzed_source_stream =
-        std::make_unique<net::FuzzedSourceStream>(&data_provider);
-    brotli_stream = net::CreateBrotliSourceStreamWithDictionary(
-        std::move(fuzzed_source_stream), dictionary_buffer, dictionary.size());
-  } else {
-    auto fuzzed_source_stream =
-        std::make_unique<net::FuzzedSourceStream>(&data_provider);
-    brotli_stream =
-        net::CreateBrotliSourceStream(std::move(fuzzed_source_stream));
-  }
-
+  auto fuzzed_source_stream =
+      std::make_unique<net::FuzzedSourceStream>(&data_provider);
+  std::unique_ptr<net::SourceStream> brotli_stream =
+      net::CreateBrotliSourceStream(std::move(fuzzed_source_stream));
   while (true) {
     scoped_refptr<net::IOBufferWithSize> io_buffer =
         base::MakeRefCounted<net::IOBufferWithSize>(64);
--- a/net/filter/brotli_source_stream_unittest.cc
+++ b/net/filter/brotli_source_stream_unittest.cc
@@ -25,16 +25,6 @@ namespace {
 const size_t kDefaultBufferSize = 4096;
 const size_t kSmallBufferSize = 128;
 
-// Get the path of data directory.
-base::FilePath GetTestDataDir() {
-  base::FilePath data_dir;
-  base::PathService::Get(base::DIR_SOURCE_ROOT, &data_dir);
-  data_dir = data_dir.AppendASCII("net");
-  data_dir = data_dir.AppendASCII("data");
-  data_dir = data_dir.AppendASCII("filter_unittests");
-  return data_dir;
-}
-
 }  // namespace
 
 class BrotliSourceStreamTest : public PlatformTest {
@@ -43,7 +33,11 @@ class BrotliSourceStreamTest : public Pl
     PlatformTest::SetUp();
 
     // Get the path of data directory.
-    base::FilePath data_dir = GetTestDataDir();
+    base::FilePath data_dir;
+    base::PathService::Get(base::DIR_SOURCE_ROOT, &data_dir);
+    data_dir = data_dir.AppendASCII("net");
+    data_dir = data_dir.AppendASCII("data");
+    data_dir = data_dir.AppendASCII("filter_unittests");
 
     // Read data from the original file into buffer.
     base::FilePath file_path;
@@ -356,43 +350,4 @@ TEST_F(BrotliSourceStreamTest, DecodeEmp
   EXPECT_EQ("BROTLI", brotli_stream()->Description());
 }
 
-TEST_F(BrotliSourceStreamTest, WithDictionary) {
-  std::string encoded_buffer;
-  std::string dictionary_data;
-
-  base::FilePath data_dir = GetTestDataDir();
-  // Read data from the encoded file into buffer.
-  base::FilePath encoded_file_path;
-  encoded_file_path = data_dir.AppendASCII("google.sbr");
-  ASSERT_TRUE(base::ReadFileToString(encoded_file_path, &encoded_buffer));
-
-  // Read data from the dictionary file into buffer.
-  base::FilePath dictionary_file_path;
-  dictionary_file_path = data_dir.AppendASCII("test.dict");
-  ASSERT_TRUE(base::ReadFileToString(dictionary_file_path, &dictionary_data));
-
-  scoped_refptr<net::IOBuffer> dictionary_buffer =
-      base::MakeRefCounted<net::StringIOBuffer>(dictionary_data);
-
-  scoped_refptr<IOBufferWithSize> out_buffer =
-      base::MakeRefCounted<IOBufferWithSize>(kDefaultBufferSize);
-
-  auto source = std::make_unique<MockSourceStream>();
-  source->AddReadResult(encoded_buffer.c_str(), encoded_buffer.size(), OK,
-                        MockSourceStream::SYNC);
-
-  std::unique_ptr<SourceStream> brotli_stream =
-      CreateBrotliSourceStreamWithDictionary(
-          std::move(source), dictionary_buffer, dictionary_data.size());
-
-  TestCompletionCallback callback;
-  int bytes_read = brotli_stream->Read(out_buffer.get(), kDefaultBufferSize,
-                                       callback.callback());
-
-  EXPECT_EQ(static_cast<int>(source_data_len()), bytes_read);
-  EXPECT_EQ(
-      0, memcmp(out_buffer->data(), source_data().c_str(), source_data_len()));
-  EXPECT_EQ("BROTLI", brotli_stream->Description());
-}
-
 }  // namespace net
